---
export interface Props {
	variant?: "classes" | "events";
	component: string;
	items: Array<string>[];
}

import { Aside } from "@astrojs/starlight/components";

/**
 * Constants, and Variables.
 */
const { component, items, variant = "classes" } = Astro.props;
const headers = {
	classes: ["Selector", "Description"],
	events: ["Event", "Description"],
};
---

{
	variant === "classes" && (
		<p>
			The <code>{component}</code> component has static classes, prefixed with{" "}
			<code>.kubrick-{component}-</code>. You can use these static classes to
			select and customize the component and its elements.
		</p>
	)
}

{
	variant === "events" && (
		<p>
			The <code>{component}</code> component will emit some events on user
			interactions. You can handle these events by passing a function as a
			callback to the following props:
		</p>
	)
}

<table class={`table-${variant} rounded-md`}>
	<thead>
		<tr>
			{headers[variant]?.map((header) => <th>{header}</th>)}
		</tr>
	</thead>
	<tbody>
		{
			items.map((item) => (
				<tr>
					<td>
						<code
							class="text-[#227188] bg-[#227188]"
							style="--tw-bg-opacity: 0.1"
						>
							{item[0]}
						</code>
					</td>
					<td>{item[1]}</td>
				</tr>
			))
		}
	</tbody>
</table>

{
	variant === "classes" && (
		<Aside>
			<p>
				Please refer to the <a href="/guides/styles">Styles Guides</a> to learn
				more about using static classes.
			</p>
		</Aside>
	)
}

<style>
	.table-classes th:first-child,
	.table-events th:first-child {
		width: 25%;
	}
</style>
